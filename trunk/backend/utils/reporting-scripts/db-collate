#! /usr/bin/perl

use JSON::XS();
use List::Util qw( max );
use Getopt::Long;
use Data::Dumper;

my $options  = {};
my $athletes = {};

GetOptions(
	"p|progression" => \$options->{ athletes },
);

my $prelim = {};
my $semfin = {};
my @entries = <>;

foreach (@entries) {
	chomp;
	my ($divid, $round, $place, $uuid, $noc, $name) = split /\t/;

	$prelim->{ $divid }{ $uuid } = 1 if( $round eq 'prelim' );
	$semfin->{ $divid }{ $uuid } = 1 if( $round eq 'semfin' );
}

$prelim->{ $_ } = half( int( keys %{$prelim->{ $_ }})) foreach keys %$prelim;
$semfin->{ $_ } = int( keys %{$semfin->{ $_ }}) foreach keys %$semfin;

foreach (@entries) {
	chomp;
	my ($divid, $round, $place, $uuid, $noc, $name) = split /\t/;
	my $prelim_place = $prelim->{ $divid };

	$divid =~ s/[a-z]$//;

	if( ! exists $athletes->{ $uuid }) { $athletes->{ $uuid } = { name => $name, noc => $noc }; }

	$athletes->{ $uuid }{ div }{ $divid }{ $round } = $place;
	if( $round eq 'prelim' && ($place ne 'WDR' || $place ne 'DSQ') && $place > $prelim_place) {
		$athletes->{ $uuid }{ div }{ $divid }{ $round } = ($place - $prelim_place) + $semfin->{ $divid };
	}
}

if( $options->{ athletes }) {
my $json = new JSON::XS();
	foreach $athlete (values %$athletes) {
		print $json->canonical->pretty->encode( $athlete ) . "\n";
	}
}

my @results = ();
foreach my $uuid (keys %$athletes) {
	my $athlete = $athletes->{ $uuid };
	foreach my $divid (sort keys %{ $athlete->{ div }}) {
		my $div = $athlete->{ div }{ $divid };
		if   ( decision( $div, 'semfin' )) { push @results, { uuid => $uuid, name => $athlete->{ name }, noc => $athlete->{ noc }, divid => $divid, place => $div->{ semfin } }; }
		elsif( decision( $div, 'prelim' )) { push @results, { uuid => $uuid, name => $athlete->{ name }, noc => $athlete->{ noc }, divid => $divid, place => $div->{ prelim } }; }
		elsif( exists $div->{ finals }   ) { push @results, { uuid => $uuid, name => $athlete->{ name }, noc => $athlete->{ noc }, divid => $divid, place => $div->{ finals } }; }
		elsif( exists $div->{ semfin }   ) { push @results, { uuid => $uuid, name => $athlete->{ name }, noc => $athlete->{ noc }, divid => $divid, place => $div->{ semfin } }; }
		elsif( exists $div->{ prelim }   ) { push @results, { uuid => $uuid, name => $athlete->{ name }, noc => $athlete->{ noc }, divid => $divid, place => $div->{ prelim } }; }
		else                               { push @results, { uuid => $uuid, name => $athlete->{ name }, noc => $athlete->{ noc }, divid => $divid, place => '-' }; }
	}
}

if( ! $options->{ athletes }) {
	foreach my $result (sort { by_divid( $a, $b ) } @results) {
		printf "%s\t%s\t%s\t%s\t%s\n", @{$result}{ qw( divid place uuid noc name ) };
	}
}

sub by_divid {
	my $a = shift;
	my $b = shift;

	return $a->{ divid } cmp $b->{ divid } || by_place( $a->{ place }, $b->{ place })
}

sub by_place {
	my $a = shift;
	my $b = shift;

	sub num { my $a = shift; return $a =~ /^\d+$/; }
	my $val = { '-' => 1000, 'WDR' => 10000, 'DSQ' => 100000 };
	my $retval = 0;
	if( num( $a ) && num( $b )) { $retval = $a <=> $b; }
	elsif( num( $a )) { $retval = $a <=> $val->{ $b }; }
	elsif( num( $b )) { $retval = $val->{ $a } <=> $b; }
	else              { $retval = $val->{ $a } <=> $val->{ $b }; }

	return $retval;
}

sub decision {
	my $div   = shift;
	my $round = shift;
	return 0 unless exists $div->{ $round };
	return $div->{ $round } =~ /^(?:DSQ|WDR)$/;
}

sub half {
	my $value = int( shift );
	return sprintf( "%d", ($value +1)/2 );
}
