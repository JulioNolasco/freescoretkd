#! /usr/bin/perl

use lib qw( /usr/local/freescore/lib );
use Try::Tiny;
use Mojolicious::Lite;
use YAML;
use FreeScore;
use FreeScore::Forms::WorldClass;
use JSON::XS;
use List::MoreUtils (qw( firstidx ));
use Data::Dumper;

our $json      = new JSON::XS();

# ============================================================
# JUDGE INTERFACE
# ============================================================

# ------------------------------------------------------------
# GET THE DIVISION STATUS
# ------------------------------------------------------------
get '/:tournament/:ring/status' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		send_response( $self, { 'description' => "Division $division->{ name } status", 'division' => $division->{ name }, 'current' => $division->{ current }, 'form' => $division->{ form }, 'round' => $division->{ round }, 'judges' => $division->{ judges }, 'forms' => $division->{ forms }{ $division->{ round }}, 'autopilot' => $division->autopilot() } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# GET THE NUMBER OF JUDGES FOR THIS DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/judges' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		send_response( $self, { 'description' => 'Number of Judges', 'division' => $division->{ name }, 'judges' => $division->{ judges } } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# TURN ON AUTOPILOT FOR THIS RING
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/autopilot' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $judge      = $self->param( 'judge' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	my $response   = autopilot( $division, $judge );
	send_response( $self, $response );
};

# ------------------------------------------------------------
# NEXT ROUND OR DIVISION
# ------------------------------------------------------------
get( '/:tournament/:ring/:object/:goto' => [ 
	object => qr/(?:division|round|athlete|form)/, 
	goto   => qr/(?:next|previous|\d+)/, 
])->to( cb => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $object     = $self->param( 'object' );
	my $goto       = $self->param( 'goto' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();


	try {
		# ===== ANY NAVIGATION DISENGAGES AUTOPILOT
		if( my $locked = $division->autopilot() ) {
			$division->autopilot( 0 );
			$division->write();
		}

		if      ( $goto eq 'next' ) {
			if    ( $object eq 'division' ) { $progress->next();             
			                                  $division = $progress->current(); 
			                                  $division->navigate_to_start();
			                                }
			elsif ( $object eq 'round'    ) { $division->next_round();       }
			elsif ( $object eq 'athlete'  ) { $division->next_athlete();     } 
			elsif ( $object eq 'form'     ) { $division->next_form();        }

		} elsif ( $goto eq 'previous' ) {
			if    ( $object eq 'division' ) { $progress->previous();         
			                                  $division = $progress->current(); 
			                                  $division->navigate_to_start();
			                                } 
			elsif ( $object eq 'round'    ) { $division->previous_round();   }
			elsif ( $object eq 'athlete'  ) { $division->previous_athlete(); }
			elsif ( $object eq 'form'     ) { $division->previous_form();    }

		} elsif ( $goto =~ /\d+/ ) {
			if    ( $object eq 'division' ) { $progress->navigate( $goto ); }
			else                            { $division->navigate( $object, $goto ); }
			
		}
		$division->write();
		$progress->write();
		send_response( $self, { 'description' => 'Navigation', 'division' => $division->{ name }, 'athlete' => $division->{ current }, 'state' => $division->{ state }, 'round' => $division->{ round }, 'form' => $division->{ form } });

	} catch {
		send_response( $self, { error => $_ });
	}
});

# ------------------------------------------------------------
# TOGGLE CURRENT DIVISION STATE BETWEEN DISPLAY AND SCORE
# ------------------------------------------------------------
get '/:tournament/:ring/display' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		# ===== ANY NAVIGATION DISENGAGES AUTOPILOT
		if( my $locked = $division->autopilot() ) {
			$division->autopilot( 0 );
			$division->write();
		}

		if( $division->is_display() ) { $division->score();   } 
		else                          { $division->display(); }

		$division->write();
		send_response( $self, { 'description' => 'Update Display State', 'state' => $division->{ state } } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# WRITE JUDGE SCORE FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/:major/:minor/:rhythm/:power/:ki' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament' );
	my $ring         = $self->param( 'ring'       );
	my $judge        = $self->param( 'judge'      );
	my $major        = get_score( $self, 'major'  );
	my $minor        = get_score( $self, 'minor'  );
	my $rhythm       = get_score( $self, 'rhythm' );
	my $power        = get_score( $self, 'power'  );
	my $ki           = get_score( $self, 'ki'     );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $division->{ current } ];
	my $score        = { major => $major, minor => $minor, rhythm => $rhythm, power => $power, ki => $ki };

	try {
		$division->record_score( $judge, $score );
		$division->write();
		my $round = $division->{ round };
		my $form  = $division->{ form };
		my $form_complete = $athlete->{ scores }{ $round }->form_complete( $form );

		# ====== INITIATE AUTOPILOT FROM THE SERVER-SIDE
		if( $form_complete ) { 
			my $response = autopilot( $division, $judge );
			send_response( $self, { %$response, description => 'Scoring athlete', athlete => $athlete->{ name }, round => $round, judge => ($judge + 1), score => { %$score }, complete => $form_complete, order => $division->{ order }{ $division->{ round }}, debug => $division->{ debug }});
		} else {
			send_response( $self, { description => 'Scoring athlete', athlete => $athlete->{ name }, round => $round, judge => ($judge + 1), score => { %$score }, complete => $form_complete, order => $division->{ order }{ $division->{ round }}, debug => $division->{ debug }});
		}

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ============================================================
# COORDINATOR INTERFACE
# ============================================================

# ------------------------------------------------------------
# COORDINATOR REQUESTS CHANGES FOR ATHLETE ORDER OR NAME(S)
# ------------------------------------------------------------
post '/:tournament/:ring/coordinator' => sub {
	my $self         = shift;
	my $tournament   = $self->param( 'tournament'     );
	my $ring         = $self->param( 'ring'           );

	try {
		my $content      = $json->decode( $self->req->body );
		my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
		my $division     = $progress->find( $content->{ divid } );
		die "Division $content->{ divid } not found" unless defined $division;
		$division->edit_athletes( $content->{ athletes }, $content->{ round } );
		$division->write();
		send_response( $self, { description => "Saving coordinator change request to athlete ordering and/or name(s)", round => $division->{ round }, athletes => $content->{ athletes } });
	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# WRITE REFEREE PUNITIVE DECISION
# ------------------------------------------------------------
get '/:tournament/:ring/coordinator/punitive/:decision/:index' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament'     );
	my $ring         = $self->param( 'ring'           );
	my $decision     = $self->param( 'decision'       );
	my $index        = $self->param( 'index'          );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $index ];

	try {
		$division->record_decision( $decision, $index );
		$division->write();
		send_response( $self, { description => 'Declaring punitive decision for athlete', athlete => $athlete->{ name }, round => $division->{ round }, decision => $decision, debug => $division->{ debug }});

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# WRITE REFEREE PENALTY FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/coordinator/penalty/:bounds/:timelimit/:restart/:misconduct/:time' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament'     );
	my $ring         = $self->param( 'ring'           );
	my $bounds       = get_score( $self, 'bounds'     );
	my $timelimit    = get_score( $self, 'timelimit'  );
	my $restart      = get_score( $self, 'restart'    );
	my $misconduct   = get_score( $self, 'misconduct' );
	my $time         = get_time( $self );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $division->{ current } ];
	my $penalties    = { bounds => $bounds, timelimit => $timelimit, restart => $restart, misconduct => $misconduct, time => $time };

	try {
		$division->record_penalties( $penalties );
		$division->write();
		if( $bounds == 0 && $timelimit == 0 && $restart == 0 && $misconduct == 0 && $time == 0 ) {
			send_response( $self, { description => 'Clearing penalties for athlete', athlete => $athlete->{ name }, round => $division->{ round }, penalties => { %$penalties }, debug => $division->{ debug }});
		} else {
			send_response( $self, { description => 'Awarding penalties to athlete', athlete => $athlete->{ name }, round => $division->{ round }, penalties => { %$penalties }, debug => $division->{ debug }});
		}

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# POST THE DIVISION HEADER DATA FOR WRITING
# ------------------------------------------------------------
post '/:tournament/:ring/:div_index/edit' => sub { 
	my $self        = shift;
	my $tournament  = $self->param( 'tournament' );
	my $ring        = $self->param( 'ring' );
	my $i           = $self->param( 'div_index' );
	my $progress    = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $staging     = new FreeScore::Forms::WorldClass( $tournament, 'staging' );
	my $division    = $i >= 0 ? $progress->{ divisions }[ $i ] : undef;
	my $content     = $self->req->body;
	my $description = 'Unknown error while editing division.';

	try {
		my $edits    = $json->decode( $content );
		my $header   = $edits->{ header };
		my $athletes = $edits->{ athletes };
		my $round    = $edits->{ round } || $division->{ round };
		my $add      = $edits->{ create };
		my $delete   = $edits->{ delete };
		my $transfer = $edits->{ transfer };
		my $success  = {};

		# ===== CREATE A NEW DIVISION
		if( exists $edits->{ create } ) {
			$division = $progress->create_division( $ring );
			$success->{ id } = $division->{ name };

		# ====== EDITING OR CREATE NEW DIVISION CONTENT
		} elsif( exists $edits->{ header } || exists $edits->{ athletes } ) {
			
			$success->{ edits } = [];
			foreach (keys %$header) {
				next if $header->{ $_ } eq '';
				my $was = $division->{ $_ };
				if( /^forms$/ ) { 
					$division->{ $_ } = FreeScore::Forms::WorldClass::Division::_parse_forms( $header->{ $_ } ); 
					push @{ $success->{ edits }}, "form selection";
				} else { 
					$division->{ $_ } = $header->{ $_ }; 
					push @{ $success->{ edits }}, "$_ was $was, now $header->{ $_ }";
				}
			}
			if( exists $edits->{ athletes } ) {
				$division->edit_athletes( $athletes, $round );
				push @{ $success->{ edits }}, "athlete(s) name and/or order";
			}
			$description = "Successfully updated division $division->{ name }";

		# ====== DELETE A DIVISION
		} elsif( exists $edits->{ delete } ) {
			my $deleted = unlink( $division->{ file } ) && (! -e $division->{ file });
			if( $deleted ) { $description = "Successfully deleted division $division->{ name } at $division->{ file }"; }
			else           { die "Database Update Error: Failed to delete division $division->{ name }"; }

		# ====== TRANSFER A DIVISION
		} elsif( exists $edits->{ transfer } ) {
			my $destination = undef;
			my $ring_path   = sprintf( "ring%02d", $ring );
			if( $transfer eq 'staging' ) {
				$destination = $division->{ file };
				$destination =~ s/\b$ring_path\b/staging/; 
			} else {
				$division    = $staging->{ divisions }[ $i ];
				$destination = $division->{ file };
				$destination =~ s/staging/$ring_path/; 
			}
			`mv $division->{ file } $destination`;
			my $transferred = -e $destination;
			if( $transferred ) { $description = "Successfully transferred division $division->{ name } from $division->{ file } to $destination"; }
			else               { die "Database Update Error: Failed to transfer division $division->{ name } from $division->{ file } to $destination"; }
			$division->{ file } = $destination;

		} else {
			die "Unknown athlete or division editing command: '$content'";
		}

		# ===== WRITE THE EDITS (EXCEPT FOR CREATING OR DELETING A DIVISION)
		unless( defined $delete || defined $add ) {
			$division->normalize();
			$division->write();
		}
		$success->{ description } = $description;
		send_response( $self, $success );

	} catch {
		send_response( $self, { error => $_ });
	}
};


# ------------------------------------------------------------
# GET THE DIVISION TEXT DATA
# ------------------------------------------------------------
get '/:tournament/:ring/:div_index/text' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $i          = $self->param( 'div_index' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->{ divisions }[ $i ];

	try {
		my $content = '';
		open FILE, $division->{ file } or die "Database Error: Can't read '$division->{ file }' $!";
		while( <FILE> ) { $content .= $_; }
		close FILE;
		send_response( $self, { content => $content } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# POST THE DIVISION TEXT DATA FOR WRITING
# ------------------------------------------------------------
post '/:tournament/:ring/:div_index/text' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $i          = $self->param( 'div_index' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->{ divisions }[ $i ];
	my $content    = $self->req->body;

	try {
		open FILE, ">$division->{ file }" or die "Database Error: Can't write to '$division->{ file }' $!";
		print FILE $content;
		close FILE;
		send_response( $self, { description => "Successfully wrote to $division->{ file }" } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ============================================================
# SETUP INTERFACE
# ============================================================
# This is temporarily served by the worldclass service until
# I can make a proper setup service.

# ------------------------------------------------------------
# SETUP REQUESTS CHANGES FOR NUMBER OF RINGS IN TOURNAMENT
# ------------------------------------------------------------
post '/:tournament/setup' => sub {
	my $self         = shift;
	my $tournament   = $self->param( 'tournament'     );
	my $ring         = $self->param( 'ring'           );

	try {
		my $content = $json->decode( $self->req->body );
		my $k       = $content->{ start };
		my $n       = $content->{ count };
		my $w       = $content->{ width };
		my $h       = $content->{ height };
		my $format  = $content->{ formation };
		my $enable  = join ", ", @{ $content->{ enable }};
		my $path    = "$FreeScore::PATH/$tournament";

		foreach my $i ( $k .. ($n + $k - 1)) {
			foreach my $event (qw( forms-grassroots forms-worldclass )) {
				my $ring = sprintf( "%s/%s/ring%02d", $path, $event, $i );
				print STDERR "Creating $ring\n";
				next if( -e $ring );
				mkdir $ring;
				chmod 0777, $ring;
				open FILE, ">$ring/progress.txt";
				print FILE "# current=0\n";
				close FILE;
				chmod 0666, "$ring/progress.txt";
			}
		}

		open FILE, ">/var/www/html/freescore/include/php/config.php" or die "Config Error: Can't write to config.php $!";
		print FILE <<EOF;
<?php
	\$host = "freescore.net";
	\$tournament = json_encode( [ 
		"name" => "FreeScore Test Data",
		"db" => "test", 
		"rings" => [ "count" => $n, "start" => $k, "enable" => [ $enable ], "width" => $w, "height" => $h, "formation" => "$format" ]
	]);
?>
EOF
		close FILE;
		send_response( $self, { description => "Updating tournament setup to $content->{ count } ring(s)", setup => $content });
	} catch {
		send_response( $self, { error => $_ });
	}
};

# ============================================================
# ERROR TRAPPING
# ============================================================
any '*command' => sub {
	my $self = shift;
	my $command = $self->param( 'command' );
	send_response( $self, { error => "Worldclass Service Error: Unknown command: $command" });
};

# ============================================================
# HELPER FUNCTIONS
# ============================================================

# ============================================================
sub autopilot {
# ============================================================
	my $division = shift;
	my $judge    = shift;

	# ===== DISALLOW REDUNDANT AUTOPILOT REQUESTS
	if( my $locked = $division->autopilot() ) {
		return { warning => 'Autopilot is already engaged for this ring by ' . ($locked == 1 ? 'Referee' : 'Judge ' . ($locked - 1)) . '.' };
	}

	# ===== ENGAGE AUTOPILOT
	try {
		$division->autopilot( $judge + 1 );
		$division->write();
	} catch {
		return { error => $_ };
	};

	my $delay = { leaderboard => 9, next => 6, total => 0 };
	my $round = $division->{ round };
	my $order = $division->{ order }{ $round };
	my $forms = $division->{ forms }{ $round };
	my $j     = firstidx { $_ == $division->{ current } } @$order;

	my $last = {
		athlete => ($division->{ current } == $order->[ -1 ]),
		form    => ($division->{ form }    == int( @$forms ) - 1),
		round   => ($division->{ round } eq 'finals' || $division->{ round } eq 'ro2'),
		each3   => (!(($j+1) % 3)),
	};

	# ===== AUTOPILOT ACTIONS
	my $action = { show => {}, go => {} };
	# ----------------------------------------
	$action->{ show }{ leaderboard } = sub {
	# ----------------------------------------
		return unless $division->autopilot(); # Cancel request if autopilot is disengaged
		if( $last->{ form } && ( $last->{ each3 } || $last->{ athlete } )) { 
			$division->display() unless $division->is_display(); 
			$division->write(); 
			Mojo::IOLoop->timer( $delay->{ next } => $action->{ go }{ next } );
			$delay->{ total } += $delay->{ next };

		} else {
			$action->{ go }{ next }();
		}
	};
	# ----------------------------------------
	$action->{ go }{ next } = sub {
	# ----------------------------------------
		return unless $division->autopilot(); # Cancel request if autopilot is disengaged
		my $go_next = {
			round   => $last->{ form } &&   $last->{ athlete } && ! $last->{ round },
			athlete => $last->{ form } && ! $last->{ athlete },
			form    => ! $last->{ form }
		};

		if    ( $go_next->{ round }   ) { $division->next_round(); }
		elsif ( $go_next->{ athlete } ) { $division->next_available_athlete(); }
		elsif ( $go_next->{ form }    ) { $division->next_form(); }
		$division->autopilot( 'clear' ); # Disengage autopilot
		$division->write();
	};

	# ===== AUTOPILOT BEHAVIOR
	# Autopilot behavior comprises the two afforementioned actions in
	# serial, with delays between.
	try {
		$delay->{ total } += $delay->{ leaderboard };
		Mojo::IOLoop->timer( $delay->{ leaderboard } => $action->{ show }{ leaderboard } );
		return { description => 'Autopilot is engaged', delay => $delay->{ total } };
	} catch {
		return { error => $_ };
	};
};

# ============================================================
sub get_score {
# ============================================================
	my $ajax  = shift;
	my $name  = shift;

	my $score = $ajax->param( $name );
	if( not defined $score || $score eq '' ) { $score = -1.0; }
	else                                     { $score /= 10;  }
	return sprintf( "%.1f", $score );
}

# ============================================================
sub get_time {
# ============================================================
	my $ajax  = shift;

	my $time = $ajax->param( 'time' );
	if( not defined $time || $time eq '' ) { $time = -1.0; }
	else                                   { $time /= 100;  }
	return sprintf( "%.2f", $time );
}

# ============================================================
sub send_response {
# ============================================================
	my $self = shift;
	my $data = shift;
	$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
	$self->render( json => $data );
};

# ============================================================
# HYPNOTOAD SERVER
# ============================================================
mkdir '/var/log/freescore' unless -e '/var/log/freescore';
app->config( hypnotoad => { listen => [ 'http://*:3088' ], pid_file => '/var/run/worldclass.pid' });
app->log( new Mojo::Log( path => '/var/log/freescore/worldclass.log', level => 'debug' ));
app->start();
