#! /usr/bin/perl

use lib qw( /usr/local/freescore/lib );
use File::Path qw( make_path );
use Data::Dumper;
use Try::Tiny;
use Mojolicious::Lite;
use YAML;
use FreeScore;
use FreeScore::Forms::WorldClass;
use JSON::XS;

our $json = new JSON::XS();

# ============================================================
# JUDGE INTERFACE
# ============================================================

# ------------------------------------------------------------
# GET THE NUMBER OF JUDGES FOR THIS DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/judges' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		send_response( $self, { 'description' => 'Number of Judges', 'division' => $division->{ name }, 'judges' => $division->{ judges } } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# NEXT ROUND OR DIVISION
# ------------------------------------------------------------
get( '/:tournament/:ring/:object/:goto' => [ 
	object => qr/(?:division|round|athlete|form)/, 
	goto   => qr/(?:next|previous|\d+)/, 
])->to( cb => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $object     = $self->param( 'object' );
	my $goto       = $self->param( 'goto' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		if      ( $goto eq 'next' ) {
			if    ( $object eq 'division' ) { $progress->next();             
			                                  $division = $progress->current(); 
			                                  $division->navigate_to_start();
			                                }
			elsif ( $object eq 'round'    ) { $division->next_round();       }
			elsif ( $object eq 'athlete'  ) { $division->next_athlete();     } 
			elsif ( $object eq 'form'     ) { $division->next_form();        }

		} elsif ( $goto eq 'previous' ) {
			if    ( $object eq 'division' ) { $progress->previous();         
			                                  $division = $progress->current(); 
			                                  $division->navigate_to_start();
			                                } 
			elsif ( $object eq 'round'    ) { $division->previous_round();   }
			elsif ( $object eq 'athlete'  ) { $division->previous_athlete(); }
			elsif ( $object eq 'form'     ) { $division->previous_form();    }

		} elsif ( $goto =~ /\d+/ ) {
			if    ( $object eq 'division' ) { $progress->navigate( $goto ); }
			else                            { $division->navigate( $object, $goto ); }
			
		}
		$division->write();
		$progress->write();
		send_response( $self, { 'description' => 'Navigation', 'division' => $division->{ name }, 'athlete' => $division->{ current }, 'state' => $division->{ state }, 'round' => $division->{ round }, 'form' => $division->{ form } });

	} catch {
		send_response( $self, { error => $_ });
	}
});

# ------------------------------------------------------------
# TOGGLE CURRENT DIVISION STATE BETWEEN DISPLAY AND SCORE
# ------------------------------------------------------------
get '/:tournament/:ring/display' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	if( $division->is_display() ) { $division->score();   } 
	else                          { $division->display(); }

	try {
		$division->write();
		$progress->write();
		send_response( $self, { 'description' => 'Update Display State', 'state' => $division->{ state } } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# WRITE JUDGE SCORE FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/:major/:minor/:rhythm/:power/:ki' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament' );
	my $ring         = $self->param( 'ring'       );
	my $judge        = $self->param( 'judge'      );
	my $major        = get_score( $self, 'major'  );
	my $minor        = get_score( $self, 'minor'  );
	my $rhythm       = get_score( $self, 'rhythm' );
	my $power        = get_score( $self, 'power'  );
	my $ki           = get_score( $self, 'ki'     );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $division->{ current } ];
	my $score        = { major => $major, minor => $minor, rhythm => $rhythm, power => $power, ki => $ki };

	try {
		$division->record_score( $judge, $score );
		$division->write();
		$progress->write();
		send_response( $self, { description => 'Scoring athlete', athlete => $athlete->{ name }, round => $division->{ round }, judge => ($judge + 1), score => { %$score }, order => $division->{ order }{ $division->{ round }}, debug => $division->{ debug }});

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ============================================================
# COORDINATOR INTERFACE
# ============================================================

# ------------------------------------------------------------
# WRITE COORDINATOR PENALTY FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/coordinator/:bounds/:timelimit/:misconduct/:time' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament'     );
	my $ring         = $self->param( 'ring'           );
	my $bounds       = get_score( $self, 'bounds'     );
	my $timelimit    = get_score( $self, 'timelimit'  );
	my $misconduct   = get_score( $self, 'misconduct' );
	my $time         = get_time( $self );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $division->{ current } ];
	my $penalties    = { bounds => $bounds, timelimit => $timelimit, misconduct => $misconduct, time => $time };

	try {
		$division->record_penalties( $penalties );
		$division->write();
		$progress->write();
		send_response( $self, { description => 'Awarding penalties to athlete', athlete => $athlete->{ name }, round => $division->{ round }, penalties => { %$penalties }, order => $division->{ order }{ $division->{ round }}, debug => $division->{ debug }});

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# FASTMATCH TRAINING DIVISION
# ------------------------------------------------------------
post '/fastmatch' => sub { 
	my $self       = shift;
	my $tournament = 'fastmatch';
	my $ring       = 1;
	my $content    = $self->req->body;
	my $path       = "$FreeScore::PATH/fastmatch/forms-worldclass/ring01";

	try {
		# ===== MAKE TOURNAMENT AND PROGRESS FILE
		make_path $path unless -e $path;
		open FILE, ">$path/progress.txt" or die "Can't write to '$path/progress.txt' $!";
		print FILE "# current = 0;";
		close FILE;

		# ===== CREATE DIVISION
		my $header = $json->decode( $content );
		open FILE, ">$path/div.wc01.txt" or die "Can't write to '$path/div.wc01.txt' $!";
		foreach my $key (keys %$header) {
			next if $key eq 'athletes';
			print FILE "# $key=$header->{ $key }\n";
		}
		foreach my $athlete (@{ $header->{ athletes }}) {
			print FILE "$athlete\n";
		}
		close FILE;
		my $division = new FreeScore::Forms::WorldClass::Division( $path, 'wc01', $ring );
		$division->write();

		send_response( $self, { description => "FastMatch division created" } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# POST THE DIVISION HEADER DATA FOR WRITING
# ------------------------------------------------------------
post '/:tournament/:ring/:div_index/edit' => sub { 
	my $self        = shift;
	my $tournament  = $self->param( 'tournament' );
	my $ring        = $self->param( 'ring' );
	my $i           = $self->param( 'div_index' );
	my $progress    = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division    = $i >= 0 ? $progress->{ divisions }[ $i ] : undef;
	my $content     = $self->req->body;
	my $description = 'Unknown error while editing division.';

	try {
		my $edits    = $json->decode( $content );
		my $header   = $edits->{ header };
		my $reorder = $edits->{ reorder };
		my $edit    = $edits->{ athlete };
		my $add     = $edits->{ create };
		my $delete  = $edits->{ delete };
		my $success = {};

		if     ( defined $header  ) { 
			$division->{ $_ } = $header->{ $_ } foreach (keys %$header); 
			$description = "Successfully updated division $division->{ id } information."; 

		} elsif( defined $reorder ) { 
			$division->reorder( $edits ); 
			$description = "Successfully reordered division $division->{ name }."; 

		} elsif( defined $edit    ) {
			my $i       = $edit->{ index };
			my $round   = $division->{ round };
			my $judges  = $division->{ judges };
			my $forms   = defined( $self->{ forms }{ $round } ) ? int( @{ $self->{ forms }{ $round }} ) : 0;
			my $athlete = undef;
			my $new     = 0;

			# ===== CHOOSE BETWEEN EDITING EXISTING OR CREATING NEW ATHLETE
			if( $i >= 0 && $i <= $#{ $division->{ athletes }} ) {
				$athlete = $division->{ athletes }[ $i ];

			} else {
				$new = 1;
				$athlete = {};
				push @{ $division->{ athletes }}, $athlete;
				$i = $#{ $division->{ athletes }};
			}

			# ===== EDIT ATHLETE
			if      ( defined $edit->{ name } ) {
				if( $new ) { 
					$athlete->{ name } = $edit->{ name };
					$division->assign( $i, $round );
					$description = "Successfully added athlete $athlete->{ name } to $round round.";

				} else {
					$description = "Successfully renamed athlete $athlete->{ name } to $edit->{ name }.";
					$athlete->{ name } = $edit->{ name };
				}

			# ===== DELETE ATHLETE
			} elsif ( defined $edit->{ remove } ) {
				$division->remove_athlete( $i );
				$description = "Successfully removed $athlete->{ name } scores.";

			# ===== RESET SCORES
			} elsif ( defined $edit->{ reset } ) {
				$athlete->{ scores }{ $round } = FreeScore::Forms::WorldClass::Division::Round::reinstantiate( undef, $forms, $judges ) if( exists $edit->{ reset } );
				$description = "Successfully cleared $athlete->{ name }.";
			}

		} elsif( defined $add     ) {
			$division = $progress->create_division( $ring );
			$success->{ id } = $division->{ name };

		} elsif( defined $delete  ) {
			my $deleted = unlink( $division->{ file } ) && (! -e $division->{ file });
			if( $deleted ) { $description = "Successfully deleted division $division->{ name } at $division->{ file }"; }
			else           { $description = "Error: Failed to delete division $division->{ name }"; }

		} else {
			$description = "Unknown athlete edit command";
		}

		unless( defined $delete || defined $add ) {
			$division->normalize();
			$division->write();
		}
		$success->{ description } = $description;
		send_response( $self, $success );

	} catch {
		send_response( $self, { error => $_ });
	}
};


# ------------------------------------------------------------
# GET THE DIVISION TEXT DATA
# ------------------------------------------------------------
get '/:tournament/:ring/:div_index/text' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $i          = $self->param( 'div_index' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->{ divisions }[ $i ];

	try {
		my $content = '';
		open FILE, $division->{ file } or die "Database Error: Can't read '$division->{ file }' $!";
		while( <FILE> ) { $content .= $_; }
		close FILE;
		send_response( $self, { content => $content } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ------------------------------------------------------------
# POST THE DIVISION TEXT DATA FOR WRITING
# ------------------------------------------------------------
post '/:tournament/:ring/:div_index/text' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $i          = $self->param( 'div_index' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->{ divisions }[ $i ];
	my $content    = $self->req->body;

	try {
		open FILE, ">$division->{ file }" or die "Database Error: Can't write to '$division->{ file }' $!";
		print FILE $content;
		close FILE;
		send_response( $self, { description => "Successfully wrote to $division->{ file }" } );

	} catch {
		send_response( $self, { error => $_ });
	}
};

# ============================================================
# ERROR TRAPPING
# ============================================================
any '*command' => sub {
	my $self = shift;
	my $command = $self->param( 'command' );
	send_response( $self, { error => "worldClass: Unknown command: $command" });
};

# ============================================================
# HELPER FUNCTIONS
# ============================================================

# ============================================================
sub get_score {
# ============================================================
	my $ajax  = shift;
	my $name  = shift;

	my $score = $ajax->param( $name );
	if( not defined $score || $score eq '' ) { $score = -1.0; }
	else                                     { $score /= 10;  }
	return sprintf( "%.1f", $score );
}

# ============================================================
sub get_time {
# ============================================================
	my $ajax  = shift;

	my $time = $ajax->param( 'time' );
	if( not defined $time || $time eq '' ) { $time = -1.0; }
	else                                   { $time /= 100;  }
	return sprintf( "%.2f", $time );
}

# ============================================================
sub send_response {
# ============================================================
	my $self = shift;
	my $data = shift;
	$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
	$self->render( json => $data );
};

# ============================================================
# HYPNOTOAD SERVER
# ============================================================
mkdir '/var/log/freescore' unless -e '/var/log/freescore';
app->config( hypnotoad => { listen => [ 'http://*:3088' ], pid_file => '/var/run/worldclass.pid' });
app->log( new Mojo::Log( path => '/var/log/freescore/worldclass.log', level => 'debug' ));
app->start();
