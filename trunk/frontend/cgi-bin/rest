#! /usr/bin/perl

use Mojolicious::Lite;
use YAML;

our $freescore_dir = "/Users/mikewong899/devel/freescore/backend/data";

get '/:tournament/*object' => sub { 
	my $self = shift;
	my ($type, $data) = retrieve( $self );
	$self->render( $type => $data );
};

del '/:tournament/*object' => sub {
	my $self = shift;
	my ($response) = remove( $self );
	$self->render( text => $response );
};

post '/' => sub {
	my $self = shift;
	my $id   = $self->param( 'id' );
	$self->render( text => ' Data posted ' . $id );
};

any '*' => sub {
	my $self = shift;
	$self->render( text => ' Unknown command ' );
};

app->start( 'cgi' );

# ============================================================
sub remove {
# ============================================================
	my $self = shift;
	my $tournament = $self->param( 'tournament' );
	my $object     = $self->param( 'object' );
	my $id         = $self->param( 'id' );
	$tournament    =~ s/[^\w\-\.]/_/g;
	$object        =~ s/[^\w\-\.\/]/_/g;
}

# ============================================================
sub retrieve {
# ============================================================
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $object     = $self->param( 'object' );
	$tournament    =~ s/[^\w\-\.]/_/g;
	$object        =~ s/[^\w\-\.\/]/_/g;

	my $db   = "$freescore_dir/$tournament/freescore.db";
	my $info = YAML::LoadFile( "$freescore_dir/$tournament/tournament.yaml" );
	if( -e $db ) {
		# ===== OBJECT LISTS
		local $_ = $object;
		if      ( /^events$/ ) {
			return ( 'json', events( $db ));

		} elsif ( /^divisions\/(.*)$/ ) {
			my $event = $1;
			$event = join " ", map { ucfirst( $_ ); } split( /\-/, $event );
			return ( 'json', divisions( $info, $db, $event ));

		} else {
			my $id = $self->param( 'id' );
			if      ( /^division$/ ) {
				return ( 'json', division( $info, $db, $id ));

			} elsif ( /^bracket\/(.*)$/ ) {
				my $event = $1;
				$event = join " ", map { ucfirst( $_ ); } split( /\-/, $event );
				return ( 'json', bracket( $db, $event, $id ));

			} else {
				return ( 'text', "$object not found in $tournament" );
			}
		}
	} else {
		return ( 'text', "$tournament not found" );
	}
}

# ============================================================
sub divisions {
# ============================================================
	my $info      = shift;
	my $db        = shift;
	my $event     = shift;
	my $divisions = parse_divisions( $db, "select * from divisions where event=\"$event\";" );
	foreach my $division (@$divisions) {
		my $id                  = $division->{ id };
		my $athletes            = parse_athletes( $db, "select athletes.* from staging, athletes where division=$id and staging.athlete = athletes.id order by staging.sequence;" );
		$division->{ athletes } = $athletes;
	}
	return { name => $info->{ name }, event => $event, divisions => $divisions };
}

# ============================================================
sub division {
# ============================================================
	my $info      = shift;
	my $db        = shift;
	my $id        = shift;

	my $divisions = parse_divisions( $db, "select * from divisions where id=$id;" );
	my $division  = shift @$divisions;
	my $athletes  = parse_athletes( $db, "select athletes.* from staging, athletes where division=$id and staging.athlete = athletes.id order by staging.sequence;" );
	$division->{ athletes }   = $athletes;
	$division->{ tournament } = $info->{ name };

	return $division;
}

# ============================================================
sub events {
# ============================================================
	my $db    = shift;
	my $event = shift;
	my $selection = `/usr/bin/sqlite3 $db 'select distinct event from divisions;'`;

	return [ split /\n/, $selection ];
}

# ============================================================
sub sql {
# ============================================================
	my $db  = shift;
	my $sql = shift;
	return split /\n/, `/usr/bin/sqlite3 $db '$sql'`;
}

# ============================================================
sub parse_athletes {
# ============================================================
	my $db = shift;
	my $sql = shift;
	my $athletes = [];
	foreach ( sql( $db, $sql )) {
		chomp;
		my ($id, $fname, $lname, $gender, $belt, $age, $weight) = split /\|/;
		push @$athletes, { 
			id => $id, fname => $fname, lname => $lname, gender => $gender, age => $age, 
			belt => $belt, weight => $weight 
		};
	}
	return $athletes;
}

# ============================================================
sub parse_divisions {
# ============================================================
	my $db = shift;
	my $sql = shift;
	my $divisions = [];
	foreach ( sql( $db, $sql )) {
		chomp;
		my (
				$id, $event, $gender, $age, $rank, $weight, $vector, $exhibition, $rounds, 
				$time, $rest, $contact, $note, $staged, $started, $finished, $replaced_by
		) = split /\|/;

		foreach my $time ( \$staged, \$started, \$finished ) {
			next unless $$time;
			$$time = $$time * 1000; # JavaScript Date() objects uses milliseconds, not seconds
		}

		push @$divisions, { 
				id => $id, event => $event, gender => $gender, age => $age, rank => $rank, 
				weight => $weight, vector => $vector, rounds => $rounds, 'time' => $time, 
				rest => $rest, contact => $contact, exhibition => $exhibition, 
				note => $note, staged => $staged, started => $started, 
				finished => $finished, replacedBy => $replaced_by 
		};
	}
	return $divisions;
}
