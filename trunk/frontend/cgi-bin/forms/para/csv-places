#! /usr/bin/perl
use Try::Tiny;
use CGI;
use CGI::Carp qw( fatalsToBrowser );
use JSON::XS;
use File::Slurp qw( read_file );
use Data::Structure::Util qw( unbless );
use List::MoreUtils qw( first_index );
use Clone qw( clone );
use Data::Dumper;

use lib qw( /usr/local/freescore/lib );
use FreeScore::Forms::Para;

my $cgi        = new CGI();
my $results    = undef;
my $tournament = read_tournament_config();
my $ring       = $cgi->param( 'ring' );
my $divid      = $cgi->param( 'divid' );
my @rounds     = ($cgi->param( 'round' ));
my $json       = new JSON::XS();

my @divisions  = ();
my $results    = undef;
try {
	if( defined $ring ) {
		if( defined $divid ) {
			$results = new FreeScore::Forms::Para( $tournament->{ db }, $ring );
			push @divisions, grep { $_->{ name } eq $divid } @{ $results->{ divisions }};

		} else {
			$results = new FreeScore::Forms::Para( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	} else {
		foreach my $ring ( @{$tournament->{ rings }} ) {
			$results = new FreeScore::Forms::Para( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	}
} catch {
	die $_;

};

@divisions = sort { (exists $a->{ matchdiv } && $b->{ matchdiv }) ? $a->{ matchdiv } cmp $b->{ matchdiv } : 0 || $a->{ name } cmp $b->{ name } } @divisions;

print $cgi->header();

print "<pre>\ndivid\tdescription             \tplace\tid\tnoc/st.\tname\n";
while (@divisions) {
	my $division = shift @divisions;
	my $matches  = [];

	# ===== GROUP MATCHES
	push @$matches, $division;
	while( @divisions ) {
		my $next = $divisions[ 0 ];
		last if( ! exists $division->{ matchdiv });
		last if( ! exists $next->{ matchdiv });
		last if( $next->{ matchdiv } ne $division->{ matchdiv });
		$next = shift @divisions;
		push @$matches, $next;
	}

	my $ro2        = $matches->[ -1 ];
	my $divid      = uc $ro2->{ matchdiv };
	my $divdesc    = sprintf( "%-24s", $ro2->{ description });
	my $thirds     = @$matches == 3 ? $json->decode( $ro2->{ thirds }) : [];
	my @placements = ((map { $ro2->{ athletes }[ $_ ] } @{$ro2->{ placement }{ ro2 }}), @{$thirds});

	foreach my $i (0 .. $#placements) {
		my $athlete = $placements[ $i ];
		my $num     = $i >= 2 ? 3 : $i + 1;
		my $name    = $athlete->{ name };
		my $noc     = noc( $athlete );

		print join( "\t", $divid, $divdesc, $num, 'uuid', $noc, $name ), "\n";
	}
}


# ============================================================
sub ordinal {
# ============================================================
	my $n = shift;
	my $d = $n % 10;
	if( $n >= 11 && $n <= 13 ) { return $n . 'th'; }
	elsif( $d == 1 )           { return $n . 'st'; }
	elsif( $d == 2 )           { return $n . 'nd'; }
	elsif( $d == 3 )           { return $n . 'rd'; }
	else                       { return $n . 'th'; }
}

# ============================================================
sub read_tournament_config {
# ============================================================
	my $php = '';
	my $config = [
		'/home/ubuntu/freescore/trunk/frontend/html/include/php/config.php',
		'/var/www/html/freescore/include/php/config.php',
		'/var/www/html/include/php/config.php',
		'/var/www/freescore/include/php/config.php',
		'/var/www/include/php/config.php',
	];
	foreach my $file (@$config) { next unless -e $file; $php = $file; last; }
	if( ! $php ) { die "Can't find configuration file 'config.php' $!"; }

	my $json = new JSON::XS();
	my $data = `echo \$(cat $php; echo '<?php echo( \$tournament ); ?>') | php`;
	my $config = $json->decode( $data );

	return $config;
}

# ============================================================
sub noc {
# ============================================================
	my $athlete = shift;
	my $noc     = $athlete->{ info }{ noc };
	$noc = $noc =~ /\// ? (split /\//, $noc)[ -1 ] : $noc;
	return uc $noc;
}

# ============================================================
sub result {
# ============================================================
	my $athlete = shift;
	my $match   = shift;
	my $round   = shift;

	my $winner  = $match->{ placement }{ $round }[ 0 ];

	if( $athlete && $match->{ athletes }[ $winner ]{ name } eq $athlete->{ name }) {
		return 'font-weight="bold"';
	} else {
		return 'text-decoration="line-through"';
	}
}
