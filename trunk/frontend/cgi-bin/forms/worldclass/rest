#! /usr/bin/perl

use lib qw( /Users/mikewong899/devel/freescore/backend/lib );
use Try::Tiny;
use Mojolicious::Lite;
use YAML;
use FreeScore::Forms::WorldClass;

srand();

# ============================================================
# JUDGE INTERFACE
# ============================================================

# ------------------------------------------------------------
# GET THE NUMBER OF JUDGES FOR THIS DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/judges' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		$self->render( json => { 'division' => $division->{ name }, 'judges' => $division->{ judges } } );

	} catch {
		$self->render( json => { error => $_ });
	}
};

# ------------------------------------------------------------
# NEXT ROUND OR DIVISION
# ------------------------------------------------------------
get( '/:tournament/:ring/:object/:navigation' => [ 
	object     => qr/(?:division|round|athlete|form)/, 
	navigation => qr/(?:next|previous)/, 
])->to( cb => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $object     = $self->param( 'object' );
	my $navigation = $self->param( 'navigation' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		if     ( $navigation eq 'next' ) {
			if    ( $object eq 'division' ) { $progress->next();             $progress->write(); }
			elsif ( $object eq 'round'    ) { $division->next_round();       $division->write(); }
			elsif ( $object eq 'athlete'  ) { $division->next_athlete();     $division->write(); } 
			elsif ( $object eq 'form'     ) { $division->next_form();        $division->write(); }
		} else {
			if    ( $object eq 'division' ) { $progress->previous();         $progress->write(); } 
			elsif ( $object eq 'round'    ) { $division->previous_round();   $division->write(); }
			elsif ( $object eq 'athlete'  ) { $division->previous_athlete(); $division->write(); }
			elsif ( $object eq 'form'     ) { $division->previous_form();    $division->write(); }
		}
		$self->render( json => { 'division' => $division->{ name }, 'athlete' => $division->{ current }, 'state' => $division->{ state }, 'round' => $division->{ round }, 'form' => $division->{ form } });

	} catch {
		$self->render( json => { error => $_ });
	}
});

# ------------------------------------------------------------
# TOGGLE CURRENT DIVISION STATE BETWEEN DISPLAY AND SCORE
# ------------------------------------------------------------
get '/:tournament/:ring/display' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	if( $division->is_display() ) { $division->score();   } 
	else                          { $division->display(); }

	try {
		$division->write();
		$self->render( json => { 'state' => $division->{ state } } );

	} catch {
		$self->render( json => { error => $_ });
	}
};

# ------------------------------------------------------------
# WRITE JUDGE SCORE FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/:major/:minor/:rhythm/:power/:ki' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament' );
	my $ring         = $self->param( 'ring'       );
	my $judge        = $self->param( 'judge'      );
	my $major        = get_score( $self, 'major'  );
	my $minor        = get_score( $self, 'minor'  );
	my $rhythm       = get_score( $self, 'rhythm' );
	my $power        = get_score( $self, 'power'  );
	my $ki           = get_score( $self, 'ki'     );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $division->{ current } ];
	my $score        = { major => $major, minor => $minor, rhythm => $rhythm, power => $power, ki => $ki };

	try {
		$division->record_score( $judge, $score );
		$division->write();
		$division->update_status();
		$self->render( json => { athlete => $athlete->{ name }, round => $division->{ round }, judge => ($judge + 1), score => $score } );

	} catch {
		$self->render( json => { error => $_ });
	}
};

any '*command' => sub {
	my $self = shift;
	my $command = $self->param( 'command' );
	$self->render( json => { error => "Forms::WorldClass: Unknown command: $command" });
};


app->start( 'cgi' );

# ============================================================
sub get_score {
# ============================================================
	my $ajax  = shift;
	my $name  = shift;

	my $score = $ajax->param( $name );
	if( not defined $score || $score eq '' ) { $score = -1.0; }
	else                                     { $score /= 10;  }
	return sprintf( "%.1f", $score );
}
