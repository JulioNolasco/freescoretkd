#! /usr/bin/perl

use lib qw( /usr/local/freescore/lib );
use Try::Tiny;
use Mojolicious::Lite;
use YAML;
use FreeScore::Forms::WorldClass;

srand();

# ============================================================
# JUDGE INTERFACE
# ============================================================

# ------------------------------------------------------------
# GET THE NUMBER OF JUDGES FOR THIS DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/judges' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { 'description' => 'Number of Judges', 'division' => $division->{ name }, 'judges' => $division->{ judges } } );

	} catch {
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { error => $_ });
	}
};

# ------------------------------------------------------------
# NEXT ROUND OR DIVISION
# ------------------------------------------------------------
get( '/:tournament/:ring/:object/:goto' => [ 
	object => qr/(?:division|round|athlete|form)/, 
	goto   => qr/(?:next|previous|\d+)/, 
])->to( cb => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $object     = $self->param( 'object' );
	my $goto       = $self->param( 'goto' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	try {
		if      ( $goto eq 'next' ) {
			if    ( $object eq 'division' ) { $progress->next();             
			                                  $division = $progress->current(); 
			                                  $division->navigate_to_start();
			                                }
			elsif ( $object eq 'round'    ) { $division->next_round();       }
			elsif ( $object eq 'athlete'  ) { $division->next_athlete();     } 
			elsif ( $object eq 'form'     ) { $division->next_form();        }

		} elsif ( $goto eq 'previous' ) {
			if    ( $object eq 'division' ) { $progress->previous();         
			                                  $division = $progress->current(); 
			                                  $division->navigate_to_start();
			                                } 
			elsif ( $object eq 'round'    ) { $division->previous_round();   }
			elsif ( $object eq 'athlete'  ) { $division->previous_athlete(); }
			elsif ( $object eq 'form'     ) { $division->previous_form();    }

		} elsif ( $goto =~ /\d+/ ) {
			if    ( $object eq 'division' ) { $progress->navigate( $goto ); }
			else                            { $division->navigate( $object, $goto ); }
			
		}
		$division->write();
		$progress->write();
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { 'description' => 'Navigation', 'division' => $division->{ name }, 'athlete' => $division->{ current }, 'state' => $division->{ state }, 'round' => $division->{ round }, 'form' => $division->{ form } });

	} catch {
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { error => $_ });
	}
});

# ------------------------------------------------------------
# TOGGLE CURRENT DIVISION STATE BETWEEN DISPLAY AND SCORE
# ------------------------------------------------------------
get '/:tournament/:ring/display' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division   = $progress->current();

	if( $division->is_display() ) { $division->score();   } 
	else                          { $division->display(); }

	try {
		$division->write();
		$progress->write();
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { 'description' => 'Update Display State', 'state' => $division->{ state } } );

	} catch {
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { error => $_ });
	}
};

# ------------------------------------------------------------
# WRITE JUDGE SCORE FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/:major/:minor/:rhythm/:power/:ki' => sub { 
	my $self         = shift;
	my $tournament   = $self->param( 'tournament' );
	my $ring         = $self->param( 'ring'       );
	my $judge        = $self->param( 'judge'      );
	my $major        = get_score( $self, 'major'  );
	my $minor        = get_score( $self, 'minor'  );
	my $rhythm       = get_score( $self, 'rhythm' );
	my $power        = get_score( $self, 'power'  );
	my $ki           = get_score( $self, 'ki'     );
	my $progress     = new FreeScore::Forms::WorldClass( $tournament, $ring );
	my $division     = $progress->current();
	my $athlete      = $division->{ athletes }[ $division->{ current } ];
	my $score        = { major => $major, minor => $minor, rhythm => $rhythm, power => $power, ki => $ki };

	try {
		$division->record_score( $judge, $score );
		$division->write();
		$progress->write();
		$division->update_status();
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { description => 'Scoring athlete', athlete => $athlete->{ name }, round => $division->{ round }, judge => ($judge + 1), score => $score } );

	} catch {
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
		$self->render( json => { error => $_ });
	}
};

any '*command' => sub {
	my $self = shift;
	my $command = $self->param( 'command' );
		$self->res->headers->header( 'Access-Control-Allow-Origin' => 'http://freescore.net' );
	$self->render( json => { error => "Forms::WorldClass: Unknown command: $command" });
};

app->config( hypnotoad => { listen => [ 'http://*:3088' ]});
app->start();

# ============================================================
sub get_score {
# ============================================================
	my $ajax  = shift;
	my $name  = shift;

	my $score = $ajax->param( $name );
	if( not defined $score || $score eq '' ) { $score = -1.0; }
	else                                     { $score /= 10;  }
	return sprintf( "%.1f", $score );
}
