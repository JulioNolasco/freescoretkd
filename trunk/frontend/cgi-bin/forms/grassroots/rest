#! /usr/bin/perl

use lib qw( /usr/local/freescore/lib );
use Mojolicious::Lite;
use YAML;
use FreeScore::Forms::GrassRoots::Division;
use FreeScore::Forms::GrassRoots;
use Try::Tiny;

srand();

# ============================================================
# JUDGE INTERFACE
# ============================================================

# ------------------------------------------------------------
# GET THE NUMBER OF JUDGES FOR THIS DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/judges' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	my $division   = $progress->current();

	try {
		$self->render( json => { 'division' => $division->{ name }, 'judges' => $division->{ judges } } );

	} catch {
		$self->render( json => { error => $_ });
	}
};

# ------------------------------------------------------------
# NEXT DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/division/next' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	try {
		$progress->next();
		$progress->write();
		$self->render( json => { 'current' => $progress->current() } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

# ------------------------------------------------------------
# PREVIOUS DIVISION
# ------------------------------------------------------------
get '/:tournament/:ring/division/previous' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	try {
		$progress->previous();
		$progress->write();
		$self->render( json => { 'current' => $progress->current() } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

# ------------------------------------------------------------
# TOGGLE CURRENT DIVISION DISPLAY STATE
# ------------------------------------------------------------
get '/:tournament/:ring/display' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	my $division   = $progress->current();
	if    ( $division->is_score()   ) { $division->display(); }
	elsif ( $division->is_display() ) { $division->score();   }
	else                              { $division->display(); }

	try {
		$division->write();
		$self->render( json => { 'state' => $division->{ state } } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

# ------------------------------------------------------------
# SCORE FOR NEXT ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/athlete/next' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	my $division   = $progress->current();
	try {
		$division->next();
		$division->write();
		$self->render( json => { 'current' => $division->{ current }, 'state' => $division->{ state } } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

# ------------------------------------------------------------
# SCORE FOR PREVIOUS ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/athlete/previous' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $progress   = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	my $division   = $progress->current();
	try {
		$division->previous();
		$division->write();
		$self->render( json => { 'current' => $division->{ current }, 'state' => $division->{ state } } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

# ------------------------------------------------------------
# WRITE JUDGE SCORE FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/:score' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $judge      = $self->param( 'judge' );
	my $score      = $self->param( 'score' ) / 10;
	my $progress   = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	my $division   = $progress->current();

	$division->record_score( $judge, $score );

	try {
		$division->write();
		$self->render( json => { athlete => $division->{ current }, judge => ($judge + 1), score => $score } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

# ------------------------------------------------------------
# WRITE JUDGE TIEBREAKER FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:ring/:judge/tb/:score' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $ring       = $self->param( 'ring' );
	my $judge      = $self->param( 'judge' );
	my $score      = $self->param( 'score' );
	my $progress   = new FreeScore::Forms::GrassRoots( $tournament, $ring );
	my $division   = $progress->current();

	$score /= 10 if( $score =~ /^\d+$/ );

	$division->record_tiebreaker( $judge, $score );

	try {
		$division->write();
		$self->render( json => { athlete => $division->{ current }, judge => ($judge + 1), tiebraker => $score } );

	} catch {
		$self->render( json => { 'error' => $_ } );
	}
};

any '*' => sub {
	my $self = shift;
	$self->render( text => 'Forms::Grassroots: Unknown command' );
};

app->start( 'cgi' );
