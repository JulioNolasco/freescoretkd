#! /usr/bin/perl

use lib qw( /Users/mikewong899/devel/freescore/backend/lib );
use Mojolicious::Lite;
use YAML;
use FreeScore::Forms::GrassRoots::Division;

srand();

# ============================================================
# GRASSROOTS FORMS
# ============================================================

# ------------------------------------------------------------
# DIVISION LIST
# ------------------------------------------------------------
get '/:tournament' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
};

# ------------------------------------------------------------
# DIVISION STATUS
# ------------------------------------------------------------
get '/:tournament/:division' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $division   = $self->param( 'division' );
	my $forms = new FreeScore::Forms::GrassRoots::Division( $tournament, $division );
	$self->render( json => { current => $forms->{ current }, state => $forms->{ state }, athletes => $forms->{ division } } );
};

# ============================================================
# JUDGE INTERFACE
# ============================================================

# ------------------------------------------------------------
# CHANGE STATE TO SCORE
# ------------------------------------------------------------
get '/:tournament/:division/score' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $division   = $self->param( 'division' );
	my $forms = new FreeScore::Forms::GrassRoots::Division( $tournament, $division );
	$forms->score();
	$forms->write();
	$self->render( json => { 'state' => 'score' } );
};

# ------------------------------------------------------------
# CHANGE STATE TO DISPLAY
# ------------------------------------------------------------
get '/:tournament/:division/display' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $division   = $self->param( 'division' );
	my $forms = new FreeScore::Forms::GrassRoots::Division( $tournament, $division );
	$forms->display();
	$forms->write();
	$self->render( json => { 'state' => 'display' } );
};

# ------------------------------------------------------------
# SCORE FOR NEXT ATHLETE
# ------------------------------------------------------------
get '/:tournament/:division/next' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $division   = $self->param( 'division' );
	my $forms = new FreeScore::Forms::GrassRoots::Division( $tournament, $division );
	$forms->next();
	$forms->write();
	$self->render( json => { 'current' => $forms->{ current }, 'state' => $forms->{ state } } );
};

# ------------------------------------------------------------
# SCORE FOR PREVIOUS ATHLETE
# ------------------------------------------------------------
get '/:tournament/:division/previous' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $division   = $self->param( 'division' );
	my $forms = new FreeScore::Forms::GrassRoots::Division( $tournament, $division );
	$forms->previous();
	$forms->write();
	$self->render( json => { 'current' => $forms->{ current }, 'state' => $forms->{ state } } );
};

# ------------------------------------------------------------
# WRITE JUDGE SCORE FOR ATHLETE
# ------------------------------------------------------------
get '/:tournament/:division/:athlete/:judge/:score' => sub { 
	my $self       = shift;
	my $tournament = $self->param( 'tournament' );
	my $division   = $self->param( 'division' );
	my $athlete    = $self->param( 'athlete' );
	my $judge      = $self->param( 'judge' );
	my $score      = $self->param( 'score' ) / 10;
	my $forms      = new FreeScore::Forms::GrassRoots::Division( $tournament, $division );
	$forms->{ division }[ $athlete ]{ scores }[ $judge ] = $score;
	$forms->write();
	$self->render( json => { athlete => $athlete, judge => ($judge + 1), score => $score } );
};

any '*' => sub {
	my $self = shift;
	$self->render( text => 'Unknown command' );
};


app->start( 'cgi' );
