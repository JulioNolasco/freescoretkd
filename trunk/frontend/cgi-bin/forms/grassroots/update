#! /usr/bin/perl
use Try::Tiny;
use CGI;
use Time::HiRes qw( usleep );
use Data::Structure::Util qw( unbless );
use JSON::XS;
use Filesys::Notify::Simple;

use lib qw( /usr/local/freescore/lib );
use FreeScore;
use FreeScore::Forms::GrassRoots;

my $cgi        = new CGI();
my $tournament = shift || $cgi->param( 'tournament' );
my $ring       = shift || $cgi->param( 'ring' ) || $cgi->cookie( 'ring' );
my $json       = new JSON::XS();
my $watcher    = new Filesys::Notify::Simple( [ "$FreeScore::PATH/$tournament/forms-grassroots" ] );

$| = 1;
print "Content-Type: text/event-stream\n";
print "Cache-Control: no-cache\n\n";

my $eol      = "\r\n";

# ===== SEND INITIAL DATA
my $id     = time();
my $update = update( $tournament, $ring );

print "id: $id$eol";
print "data: $update$eol$eol";

# ===== MONITOR FOR CHANGES
UPDATE: while( 1 ) {

    $watcher->wait( sub {
        $id     = time();
        $update = update( $tournament, $ring );

        print "id: $id$eol";
        print "data: $update$eol$eol";
    });
}

# ============================================================
sub update {
# ============================================================
    my $tournament = shift;
    my $ring       = shift;
    my $update     = undef;
    my $data       = undef;

    try {
        $data = new FreeScore::Forms::GrassRoots( $tournament, $ring );
        unbless( $data );

    } catch {
        $data = { error => $_ };
    };

    my $update = $json->canonical->encode( $data );
    $update =~ s/"(\d+(?:\.\d+)?)"/$1/g; # Convert strings of real numbers to real numbers

    return $update;
}
