#! /usr/bin/perl
use Try::Tiny;
use CGI;
use JSON::XS;
use Data::Dumper;

use lib qw( /usr/local/freescore/lib );
use FreeScore::Sparring::Virtual;

my $cgi        = new CGI();
my $results    = undef;
my $tournament = read_tournament_config();
my $ring       = $cgi->param( 'ring' );
my $divid      = $cgi->param( 'divid' );

my @divisions  = ();
try {
	if( defined $ring ) {
		if( defined $divid ) {
			$results = new FreeScore::Sparring::Virtual( $tournament->{ db }, $ring );
			push @divisions, grep { $_->{ name } eq $divid } @{ $results->{ divisions }};
		} else {
			$results = new FreeScore::Sparring::Virtual( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
	} else {
		foreach my $ring ( @{$tournament->{ rings }} ) {
			$results = new FreeScore::Sparring::Virtual( $tournament->{ db }, $ring );
			push @divisions, @{ $results->{ divisions }};
		}
		if( defined $divid ) {
			@divisions = grep { $_->{ name } eq $divid } @divisions;
		}
	}
} catch {
	die $_;
};

@divisions = sort { $a->{ name } cmp $b->{ name } } @divisions;
my $branding = '/var/www/html/images/branding/reports.css';
$branding = -e $branding ? read_file( $branding ) : '';

print $cgi->header();

print <<EOF;
<html>
	<head>
		<title>Virtual Sparring Draws</title>
		<style type="text/css">
			body {
				font-family: Optima;
			}
			.division {
				margin-top: 60px;
				width: 720px;
				height: 22px;
			}

			.results {
				page-break-inside: avoid;
				page-break-after: always;
			}

			.results table {
				width: 720px;
				page-break-inside: avoid;
			}
			.results thead tr { background: #eee; }
			.results thead th {
				border-top: 1pt solid #ccc;
				border-bottom: 1pt solid #ccc;
				padding: 0 4px 0 4px;
				text-align: left;
				height: 22px;
			}
			.results thead th.number  { width: 20px; }
			.results thead th.noc     { width: 80px; }
			.results thead th.athlete { width: 860px; }
			.results thead th.form    { width: 200px; }
			.results td.decision      { text-align: center; color: red; }

			.results tbody td {
				padding: 2px 4px 2px 4px;
			}

			.results tbody tr:nth-child( even ) { background: #eee; }
			.results tbody tr:nth-child( odd  ) { background: #fff; }

			# .header, .header-space { height: 225px; }
			# .footer, .footer-space { height: 50px; }
			# .header { position: fixed; top: 0; }
			# .footer { position: fixed; bottom: 0; }
			$branding
		</style>
	</head>
	<body>
	<table>
	<thead><tr><td><div class="header-space"> </div></td></tr></thead>
	<tbody><tr><td>
EOF
foreach my $division (@divisions) {
	my $name   = uc $division->{ name };
	my $judges = $division->{ judges } || 3;
	my $placed = {};
	my $i = 0;
	print <<EOF;
		<div class="results">
			<div class="division"><b>Division $name</b> &mdash; $division->{ description }</div>
			<table border=0 cellpadding=0 cellspacing=0>
				<thead>
				<tr>
					<th class="number">#</th>
					<th class="noc">NOC</th>
					<th class="athlete">Name</th>
					<th class="form"></th>
					<th class="decision"></th>
				</tr>
				</thead>
				<tbody>
EOF
	my $n = $#{$division->{ athletes }};
	foreach my $i (0 .. $n) {
		my $athlete = $division->{ athletes }[ $i ];
		my $noc     = uc $athlete->{ info }{ noc };
		$noc = $noc =~ /\// ? (split /\//, $noc)[ -1 ] : $noc;
		print "\t\t\t\t<tr><td>" . ($i + 1) . "</td><td>$noc</td><td>$athlete->{ name }</td><td></td><td class=\"decision\">$athlete->{ info }{ video }{ decision }</td></tr>\n";
	}
	print <<EOF;
				</tbody>
			</table>
		</div>
EOF
}

print <<EOF;
	</td></tr></tbody>
	<tfoot><tr><td><div class="footer-space"> </div></td></tr></tfoot>
</table>
<div class="header"><img src="/images/branding/header.png" width="100%"></div>
<div class="footer"><img src="/images/branding/footer.png" width="100%"></div>
	</body>
</html>
EOF

# ============================================================
sub ordinal {
# ============================================================
	my $n = shift;
	my $d = $n % 10;
	if( $n >= 11 && $n <= 13 ) { return $n . 'th'; }
	elsif( $d == 1 )           { return $n . 'st'; }
	elsif( $d == 2 )           { return $n . 'nd'; }
	elsif( $d == 3 )           { return $n . 'rd'; }
	else                       { return $n . 'th'; }
}

# ============================================================
sub read_tournament_config {
# ============================================================
	my $php = '';
	my $config = [
		'/home/ubuntu/freescore/trunk/frontend/html/include/php/config.php',
		'/var/www/html/freescore/include/php/config.php',
		'/var/www/html/include/php/config.php',
		'/var/www/freescore/include/php/config.php',
		'/var/www/include/php/config.php',
	];
	foreach my $file (@$config) { next unless -e $file; $php = $file; last; }
	if( ! $php ) { die "Can't find configuration file 'config.php' $!"; }

	my $json = new JSON::XS();
	my $data = `echo \$(cat $php; echo '<?php echo( \$tournament ); ?>') | php`;
	my $config = $json->decode( $data );

	return $config;

}
