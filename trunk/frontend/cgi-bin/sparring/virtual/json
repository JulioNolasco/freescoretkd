#! /usr/bin/perl
use Try::Tiny;
use CGI;
use CGI::Carp qw( fatalsToBrowser );
use File::Slurp qw( read_file );
use List::Util qw( reduce );
use List::MoreUtils qw( minmax );
use JSON::XS;
use Data::Structure::Util qw( unbless );
use Clone qw( clone );
use Data::Dumper;

use lib qw( /usr/local/freescore/lib );
use FreeScore::Sparring::Virtual;

my $cgi        = new CGI();
my $results    = undef;
my $tournament = read_tournament_config();
my $ring       = $cgi->param( 'ring' );
my $divid      = $cgi->param( 'divid' );
my $json       = new JSON::XS();
my @divisions  = ();

try {
    if( defined $ring ) {
        if( defined $divid ) {
            $results = new FreeScore::Sparring::Virtual( $tournament->{ db }, $ring );
            push @divisions, grep { $_->{ name } eq $divid } @{ $results->{ divisions }};
        } else {
            $results = new FreeScore::Sparring::Virtual( $tournament->{ db }, $ring );
            push @divisions, @{ $results->{ divisions }};
        }
    } else {
        foreach my $ring ( @{$tournament->{ rings }}) {
            $results = new FreeScore::Sparring::Virtual( $tournament->{ db }, $ring );
            push @divisions, @{ $results->{ divisions }};
        }
        if( defined $divid ) {
            @divisions = grep { $_->{ name } eq $divid } @divisions;
        }
    }
} catch {
    die $_;
};

@divisions = sort { $a->{ name } cmp $b->{ name } } @divisions;

print $cgi->header( 'application/json' );
my $response = unbless( clone( { divisions => \@divisions } ));
print $json->canonical->encode( $response );
exit( 0 );


# ============================================================
sub read_tournament_config {
# ============================================================
    my $php = '';
    my $config = [
        '/home/ubuntu/freescore/trunk/frontend/html/include/php/config.php',
        '/var/www/html/freescore/include/php/config.php',
        '/var/www/html/include/php/config.php',
        '/var/www/freescore/include/php/config.php',
        '/var/www/include/php/config.php',
    ];
    foreach my $file (@$config) { next unless -e $file; $php = $file; last; }
    if( ! $php ) { die "Can't find configuration file 'config.php' $!"; }

    my $json = new JSON::XS();
    my $data = `echo \$(cat $php; echo '<?php echo( \$tournament ); ?>') | php`;
    my $config = $json->decode( $data );

    return $config;
}
